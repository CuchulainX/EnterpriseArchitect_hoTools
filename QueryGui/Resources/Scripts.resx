<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="hoDemo2ParScript" xml:space="preserve">
    <value>'EA-Matic
'[path=\Framework\ho\hoTools]
'[group=hoTools]
!INC Local Scripts.EAConstants-VBScript
' Dim doesn't work (syntax error)
' Object 'Session' doesn't exist (use  rep.WriteOutput "Script", "MyTest",0)
' Var 'rep' is loaded
' You may create an instance 'EAAddinFramework.Utils.Model' of the first running EA-Instance

function hoDemoPrintContext(modelItem, objectType)
    'Dim itemType as 5
	itemType = "unknown"
	Select Case objectType
	    Case otElement
			itemType = "Element"
		Case otPackage
			itemType = "Package"
		Case otDiagram
			itemType = "Diagram"
		Case otAttribute
			itemType = "Attribute"
		Case otOperation
			itemType = "Operation"
	End Select
	Dim s 
	s = "hoDemoPrintContext: Context item is: '" + modelItem.Name + "' of type '" + itemType + "'"
    ' Output to EA			
    Repository.EnsureOutputVisible("Script") 
	Repository.WriteOutput "Script", s, 0
end function</value>
    <comment>Demo Script to show Query with Script functionality with 2 Parameters</comment>
  </data>
  <data name="hoDemo3ParScript" xml:space="preserve">
    <value>'EA-Matic
' Usage of Geert Bellekens Script Framework to administer Scripts recommended
'[path=\Framework\ho\hoTools]
'[group=hoTools]
'option explicit

!INC Local Scripts.EAConstants-VBScript
'----------------------------------------------------------------------
' Dim doesn't work (syntax error, used in EA for intellissense)
' Object 'Session' doesn't exist (use  rep.WriteOutput "Script", "MyTest",0)
' Var 'rep' is loaded by script environment
' You may create an instance 'EAAddinFramework.Utils.Model' of the first running EA-Instance

'---------------------------------------------------------------------
' Par1: ModelItem (diagram, package, element)
' Par2: ObjectType
' Par3: Model (methods and attributes see code in https://github.com/Helmut-Ortmann/EnterpriseArchitect_hoTools.git)
function hoDemo3Parameter(ModelItem, ObjectType, Model)
   ' The EA default variable 'rep'
    'rep.ClearOutput("Script")
    Repository.EnsureOutputVisible("Script") 

    ' just output the parameters
	Repository.WriteOutput "Script","Par1: '"+ CStr(ObjectType) + "' Par2: '" + ModelItem.Name + "' Par3: '" + Model + "'",0
	
	' Get rep via Model object.
    set m = CreateObject("EAAddinFramework.Utils.Model")
	if m is nothing Then
	   Repository.WriteOutput "Script","Can't create object for 'EAAddinFramework.Utils.Model'",0
	   Exit Function
	end if
    ' Create new Model Object with the first running EA instance
	set rep = m.Repository
	rep.EnsureOutputVisible("Script") 
	rep.WriteOutput "Script","Par1: '"+ CStr(ObjectType) + "' Par2: '" + ModelItem.Name + "' Par3: '" + Model + "'",0
	
	itemType = "unknown"
	Select Case ObjectType
	    Case otElement
			itemType = "Element"
		Case otPackage
			itemType = "Package"
		Case otDiagram
			itemType = "Diagram"
		Case otAttribute
			itemType = "Attribute"
		Case otOperation
			itemType = "Operation"
	End Select
	rep.WriteOutput "Script", "hoDemo3Parameter: item type='" + itemType + "', name='" + ModelItem.Name + "' found.",0
	rep.WriteOutput "Script","----------------------------------------------------",0

end function</value>
    <comment>Demo Script to show Query with Script functionality with 3 Parameters</comment>
  </data>
  <data name="hoDemoRunSql" xml:space="preserve">
    <value>'EA-Matic
' Usage of Geert Bellekens Script Framework to administer Scripts recommended
'[path=\Framework\ho\hoTools]
'[group=hoTools]
'option explicit

!INC Local Scripts.EAConstants-VBScript
'----------------------------------------------------------------------
' Dim doesn't work (syntax error, used in EA for intellissense)
' Object 'Session' doesn't exist (use  Repository.WriteOutput "Script", "MyTest",0)
' Var 'Repository' is loaded by script environment
' You may create an instance 'EAAddinFramework.Utils.Model' of the first running EA-Instance

'---------------------------------------------------------------------
' Demo Script to show how to run an SQL file by Script
sub hoDemoRunSql
   ' The EA default variable 'Repository'
    'Repository.ClearOutput("Script")
    Repository.EnsureOutputVisible("Script") 

    ' just output the parameters
	Repository.WriteOutput "Script","hoDemoRunSql for d:\temp\Branch.sql",0
	
	' Get Repository via Model object.
    set m = CreateObject("EAAddinFramework.Utils.Model")
	if m is nothing Then
	   Repository.WriteOutput "Script","Can't create object for 'EAAddinFramework.Utils.Model'",0
	   Exit Function
	end if
    ' Create new Model Object with the first running EA instance
	set rep = m.Repository
	rep.EnsureOutputVisible("Script") 
	' Run the SQL
	' par 1: EA Search-name, SQL relative file (SQL Paths in Settings) or absolute file
    ' par 2: &lt;Search Term&gt;, supports wild cards ('%','*','_','?'), see Wiki on GitHub
	m.SearchRun "d:\temp\sql\Branch.sql", ""
end sub

' Run the function
hoDemoRunSql</value>
    <comment>Demo Script to run SQL Search from Script</comment>
  </data>
</root>