//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1573, 1591

using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Mapping;

namespace DataModels.VcSymbols
{
	/// <summary>
	/// Database       : .BROWSE.VC
	/// Data Source    : .BROWSE.VC
	/// Server Version : 3.24.0
	/// </summary>
	public partial class BrowseVcDB : LinqToDB.Data.DataConnection
	{
		public ITable<AssocSpan>       AssocSpans       { get { return this.GetTable<AssocSpan>(); } }
		public ITable<AssocText>       AssocTexts       { get { return this.GetTable<AssocText>(); } }
		public ITable<BaseClassParent> BaseClassParents { get { return this.GetTable<BaseClassParent>(); } }
		public ITable<CodeItem>        CodeItems        { get { return this.GetTable<CodeItem>(); } }
		public ITable<CodeItemKind>    CodeItemKinds    { get { return this.GetTable<CodeItemKind>(); } }
		public ITable<Config>          Configs          { get { return this.GetTable<Config>(); } }
		public ITable<ConfigFile>      ConfigFiles      { get { return this.GetTable<ConfigFile>(); } }
		public ITable<File>            Files            { get { return this.GetTable<File>(); } }
		public ITable<FileMap>         FileMaps         { get { return this.GetTable<FileMap>(); } }
		public ITable<FileSignature>   FileSignatures   { get { return this.GetTable<FileSignature>(); } }
		public ITable<HintFile>        HintFiles        { get { return this.GetTable<HintFile>(); } }
		public ITable<Parser>          Parsers          { get { return this.GetTable<Parser>(); } }
		public ITable<Project>         Projects         { get { return this.GetTable<Project>(); } }
		public ITable<ProjectRef>      ProjectRefs      { get { return this.GetTable<ProjectRef>(); } }
		public ITable<Property>        Properties       { get { return this.GetTable<Property>(); } }
		public ITable<SharedText>      SharedTexts      { get { return this.GetTable<SharedText>(); } }

		public BrowseVcDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public BrowseVcDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public BrowseVcDB(LinqToDBConnectionOptions options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		public BrowseVcDB(LinqToDBConnectionOptions<BrowseVcDB> options)
			: base(options)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();
	}

	[Table("assoc_spans")]
	public partial class AssocSpan
	{
		[Column("code_item_id"), NotNull] public long CodeItemId  { get; set; } // bigint
		[Column("kind"),         NotNull] public byte Kind        { get; set; } // tinyint
		[Column("start_column"), NotNull] public long StartColumn { get; set; } // integer
		[Column("start_line"),   NotNull] public long StartLine   { get; set; } // integer
		[Column("end_column"),   NotNull] public long EndColumn   { get; set; } // integer
		[Column("end_line"),     NotNull] public long EndLine     { get; set; } // integer

		#region Associations

		/// <summary>
		/// FK_assoc_spans_0_0 (code_items)
		/// </summary>
		[Association(ThisKey="CodeItemId", OtherKey="Id", CanBeNull=false)]
		public CodeItem CodeItem { get; set; }

		#endregion
	}

	[Table("assoc_text")]
	public partial class AssocText
	{
		[Column("code_item_id"), NotNull] public long   CodeItemId { get; set; } // bigint
		[Column("kind"),         NotNull] public byte   Kind       { get; set; } // tinyint
		[Column("text"),         NotNull] public string Text       { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_assoc_text_0_0 (code_items)
		/// </summary>
		[Association(ThisKey="CodeItemId", OtherKey="Id", CanBeNull=false)]
		public CodeItem CodeItem { get; set; }

		#endregion
	}

	[Table("base_class_parents")]
	public partial class BaseClassParent
	{
		[Column("base_code_item_id"),   NotNull] public long BaseCodeItemId   { get; set; } // bigint
		[Column("parent_code_item_id"), NotNull] public long ParentCodeItemId { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_base_class_parents_1_0 (code_items)
		/// </summary>
		[Association(ThisKey="BaseCodeItemId", OtherKey="Id", CanBeNull=false)]
		public CodeItem BaseCodeItem { get; set; }

		/// <summary>
		/// FK_base_class_parents_0_0 (code_items)
		/// </summary>
		[Association(ThisKey="ParentCodeItemId", OtherKey="Id", CanBeNull=false)]
		public CodeItem ParentCodeItem { get; set; }

		#endregion
	}

	[Table("code_items")]
	public partial class CodeItem
	{
		[Column("id"),                               PrimaryKey,  NotNull] public long   Id                           { get; set; } // integer
		[Column("file_id"),                                       NotNull] public long   FileId                       { get; set; } // bigint
		[Column("parent_id"),                                     NotNull] public long   ParentId                     { get; set; } // bigint
		[Column("kind"),                                          NotNull] public long   Kind                         { get; set; } // integer
		[Column("attributes"),                                    NotNull] public long   Attributes                   { get; set; } // integer
		[Column("name"),                                          NotNull] public string Name                         { get; set; } // text(max)
		[Column("type"),                                Nullable         ] public string Type                         { get; set; } // text(max)
		[Column("start_column"),                                  NotNull] public long   StartColumn                  { get; set; } // integer
		[Column("start_line"),                                    NotNull] public long   StartLine                    { get; set; } // integer
		[Column("end_column"),                                    NotNull] public long   EndColumn                    { get; set; } // integer
		[Column("end_line"),                                      NotNull] public long   EndLine                      { get; set; } // integer
		[Column("name_start_column"),                             NotNull] public long   NameStartColumn              { get; set; } // integer
		[Column("name_start_line"),                               NotNull] public long   NameStartLine                { get; set; } // integer
		[Column("name_end_column"),                               NotNull] public long   NameEndColumn                { get; set; } // integer
		[Column("name_end_line"),                                 NotNull] public long   NameEndLine                  { get; set; } // integer
		[Column("param_default_value"),                 Nullable         ] public string ParamDefaultValue            { get; set; } // text(max)
		[Column("param_default_value_start_column"),    Nullable         ] public long?  ParamDefaultValueStartColumn { get; set; } // integer
		[Column("param_default_value_start_line"),      Nullable         ] public long?  ParamDefaultValueStartLine   { get; set; } // integer
		[Column("param_default_value_end_column"),      Nullable         ] public long?  ParamDefaultValueEndColumn   { get; set; } // integer
		[Column("param_default_value_end_line"),        Nullable         ] public long?  ParamDefaultValueEndLine     { get; set; } // integer
		[Column("param_number"),                        Nullable         ] public short? ParamNumber                  { get; set; } // smallint
		[Column("lower_name_hint"),                               NotNull] public string LowerNameHint                { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_assoc_spans_0_0_BackReference (assoc_spans)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CodeItemId", CanBeNull=true)]
		public IEnumerable<AssocSpan> Assocspans { get; set; }

		/// <summary>
		/// FK_assoc_text_0_0_BackReference (assoc_text)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="CodeItemId", CanBeNull=true)]
		public IEnumerable<AssocText> Assoctexts { get; set; }

		/// <summary>
		/// FK_base_class_parents_0_0_BackReference (base_class_parents)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ParentCodeItemId", CanBeNull=true)]
		public IEnumerable<BaseClassParent> Baseclassparents { get; set; }

		/// <summary>
		/// FK_base_class_parents_1_0_BackReference (base_class_parents)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="BaseCodeItemId", CanBeNull=true)]
		public IEnumerable<BaseClassParent> FkBaseClassParents10BackReferences { get; set; }

		#endregion
	}

	[Table("code_item_kinds")]
	public partial class CodeItemKind
	{
		[Column("id"),          PrimaryKey, NotNull] public long   Id         { get; set; } // integer
		[Column("name"),                    NotNull] public string Name       { get; set; } // text(max)
		[Column("parser_guid"),             NotNull] public string ParserGuid { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_code_item_kinds_0_0 (parsers)
		/// </summary>
		[Association(ThisKey="ParserGuid", OtherKey="ParserGuid", CanBeNull=false)]
		public Parser ParserGu { get; set; }

		#endregion
	}

	[Table("configs")]
	public partial class Config
	{
		[Column("id"),                              PrimaryKey,  NotNull] public long   Id                           { get; set; } // integer
		[Column("hash"),                                         NotNull] public long   Hash                         { get; set; } // bigint
		[Column("project_id"),                                   NotNull] public long   ProjectId                    { get; set; } // bigint
		[Column("name"),                                         NotNull] public string Name                         { get; set; } // text(max)
		[Column("toolset_isense_identifier"),          Nullable         ] public string ToolsetIsenseIdentifier      { get; set; } // text(max)
		[Column("has_modules"),                        Nullable         ] public byte?  HasModules                   { get; set; } // tinyint
		[Column("exclude_path"),                       Nullable         ] public long?  ExcludePath                  { get; set; } // bigint
		[Column("source_path"),                        Nullable         ] public long?  SourcePath                   { get; set; } // bigint
		[Column("config_include_path"),                Nullable         ] public long?  ConfigIncludePath            { get; set; } // bigint
		[Column("config_framework_include_path"),      Nullable         ] public long?  ConfigFrameworkIncludePath   { get; set; } // bigint
		[Column("config_options"),                     Nullable         ] public long?  ConfigOptions                { get; set; } // bigint
		[Column("platform_include_path"),              Nullable         ] public long?  PlatformIncludePath          { get; set; } // bigint
		[Column("platform_framework_include_path"),    Nullable         ] public long?  PlatformFrameworkIncludePath { get; set; } // bigint
		[Column("platform_options"),                   Nullable         ] public long?  PlatformOptions              { get; set; } // bigint
		[Column("options_for_reference"),              Nullable         ] public long?  OptionsForReference          { get; set; } // bigint
		[Column("include_path_for_reference"),         Nullable         ] public long?  IncludePathForReference      { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_config_files_1_0_BackReference (config_files)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConfigId", CanBeNull=true)]
		public IEnumerable<ConfigFile> Configfiles { get; set; }

		/// <summary>
		/// FK_configs_0_0 (projects)
		/// </summary>
		[Association(ThisKey="ProjectId", OtherKey="Id", CanBeNull=false)]
		public Project Project { get; set; }

		/// <summary>
		/// FK_project_refs_0_0_BackReference (project_refs)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ConfigId", CanBeNull=true)]
		public IEnumerable<ProjectRef> Projectrefs { get; set; }

		#endregion
	}

	[Table("config_files")]
	public partial class ConfigFile
	{
		[Column("config_id"),              NotNull    ] public long  ConfigId             { get; set; } // bigint
		[Column("file_id"),                NotNull    ] public long  FileId               { get; set; } // bigint
		[Column("implicit"),               NotNull    ] public byte  @implicit            { get; set; } // tinyint
		[Column("reference"),              NotNull    ] public byte  Reference            { get; set; } // tinyint
		[Column("compiled"),               NotNull    ] public byte  Compiled             { get; set; } // tinyint
		[Column("compiled_module"),        NotNull    ] public byte  CompiledModule       { get; set; } // tinyint
		[Column("compiled_header_unit"),   NotNull    ] public byte  CompiledHeaderUnit   { get; set; } // tinyint
		[Column("compiled_pch"),           NotNull    ] public byte  CompiledPch          { get; set; } // tinyint
		[Column("explicit"),               NotNull    ] public byte  @explicit            { get; set; } // tinyint
		[Column("shared"),                 NotNull    ] public byte  Shared               { get; set; } // tinyint
		[Column("generated"),              NotNull    ] public byte  Generated            { get; set; } // tinyint
		[Column("config_final"),           NotNull    ] public byte  ConfigFinal          { get; set; } // tinyint
		[Column("include_path"),              Nullable] public long? IncludePath          { get; set; } // bigint
		[Column("framework_include_path"),    Nullable] public long? FrameworkIncludePath { get; set; } // bigint
		[Column("options"),                   Nullable] public long? Options              { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_config_files_1_0 (configs)
		/// </summary>
		[Association(ThisKey="ConfigId", OtherKey="Id", CanBeNull=false)]
		public Config Config { get; set; }

		/// <summary>
		/// FK_config_files_0_0 (files)
		/// </summary>
		[Association(ThisKey="FileId", OtherKey="Id", CanBeNull=false)]
		public File File { get; set; }

		#endregion
	}

	[Table("files")]
	public partial class File
	{
		[Column("id"),          PrimaryKey, NotNull] public long   Id         { get; set; } // integer
		[Column("timestamp"),               NotNull] public long   Timestamp  { get; set; } // bigint
		[Column("parsetime"),               NotNull] public double Parsetime  { get; set; } // real
		[Column("addtime"),                 NotNull] public double Addtime    { get; set; } // real
		[Column("difftime"),                NotNull] public double Difftime   { get; set; } // real
		[Column("name"),                    NotNull] public string Name       { get; set; } // text(max)
		[Column("leaf_name"),               NotNull] public string LeafName   { get; set; } // text(max)
		[Column("attributes"),              NotNull] public long   Attributes { get; set; } // integer
		[Column("parser_guid"),             NotNull] public string ParserGuid { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_config_files_0_0_BackReference (config_files)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="FileId", CanBeNull=true)]
		public IEnumerable<ConfigFile> Configs { get; set; }

		/// <summary>
		/// FK_file_signatures_0_0_BackReference (file_signatures)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="FileId", CanBeNull=true)]
		public IEnumerable<FileSignature> Filesignatures { get; set; }

		/// <summary>
		/// FK_files_0_0 (parsers)
		/// </summary>
		[Association(ThisKey="ParserGuid", OtherKey="ParserGuid", CanBeNull=false)]
		public Parser ParserGu { get; set; }

		#endregion
	}

	[Table("file_map")]
	public partial class FileMap
	{
		[Column("code_item_id"), NotNull] public long CodeItemId { get; set; } // bigint
		[Column("config_id"),    NotNull] public long ConfigId   { get; set; } // bigint
		[Column("file_id"),      NotNull] public long FileId     { get; set; } // bigint
	}

	[Table("file_signatures")]
	public partial class FileSignature
	{
		[Column("file_id"),   NotNull] public long   FileId    { get; set; } // bigint
		[Column("kind"),      NotNull] public byte   Kind      { get; set; } // tinyint
		[Column("signature"), NotNull] public byte[] Signature { get; set; } // blob

		#region Associations

		/// <summary>
		/// FK_file_signatures_0_0 (files)
		/// </summary>
		[Association(ThisKey="FileId", OtherKey="Id", CanBeNull=false)]
		public File File { get; set; }

		#endregion
	}

	[Table("hint_files")]
	public partial class HintFile
	{
		[Column("id"),        PrimaryKey, NotNull] public long   Id        { get; set; } // integer
		[Column("timestamp"),             NotNull] public long   Timestamp { get; set; } // bigint
		[Column("name"),                  NotNull] public string Name      { get; set; } // text(max)
	}

	[Table("parsers")]
	public partial class Parser
	{
		[Column("parser_guid"), PrimaryKey, NotNull] public string ParserGuid { get; set; } // text(max)
		[Column("name"),                    NotNull] public string Name       { get; set; } // text(max)
		[Column("short_name"),              NotNull] public string ShortName  { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_code_item_kinds_0_0_BackReference (code_item_kinds)
		/// </summary>
		[Association(ThisKey="ParserGuid", OtherKey="ParserGuid", CanBeNull=true)]
		public IEnumerable<CodeItemKind> Codeitemkinds { get; set; }

		/// <summary>
		/// FK_files_0_0_BackReference (files)
		/// </summary>
		[Association(ThisKey="ParserGuid", OtherKey="ParserGuid", CanBeNull=true)]
		public IEnumerable<File> Files { get; set; }

		#endregion
	}

	[Table("projects")]
	public partial class Project
	{
		[Column("id"),        PrimaryKey, NotNull] public long   Id        { get; set; } // integer
		[Column("name"),                  NotNull] public string Name      { get; set; } // text(max)
		[Column("directory"),             NotNull] public string Directory { get; set; } // text(max)
		[Column("guid"),                  NotNull] public string Guid      { get; set; } // text(max)
		[Column("shared"),                NotNull] public byte   Shared    { get; set; } // tinyint

		#region Associations

		/// <summary>
		/// FK_configs_0_0_BackReference (configs)
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ProjectId", CanBeNull=true)]
		public IEnumerable<Config> Configs { get; set; }

		#endregion
	}

	[Table("project_refs")]
	public partial class ProjectRef
	{
		[Column("config_id"),        NotNull    ] public long  ConfigId       { get; set; } // bigint
		[Column("project_ref_guid"), NotNull    ] public long  ProjectRefGuid { get; set; } // bigint
		[Column("project_ref_name"),    Nullable] public long? ProjectRefName { get; set; } // bigint
		[Column("resolved_name"),       Nullable] public long? ResolvedName   { get; set; } // bigint

		#region Associations

		/// <summary>
		/// FK_project_refs_0_0 (configs)
		/// </summary>
		[Association(ThisKey="ConfigId", OtherKey="Id", CanBeNull=false)]
		public Config Config { get; set; }

		#endregion
	}

	[Table("properties")]
	public partial class Property
	{
		[Column("name"),  PrimaryKey, NotNull] public string Name  { get; set; } // text(max)
		[Column("value"),             NotNull] public string Value { get; set; } // text(max)
	}

	[Table("shared_text")]
	public partial class SharedText
	{
		[Column("id"),   PrimaryKey, NotNull] public long   Id   { get; set; } // integer
		[Column("hash"),             NotNull] public long   Hash { get; set; } // bigint
		[Column("text"),             NotNull] public string Text { get; set; } // text(max)
	}

	public static partial class TableExtensions
	{
		public static CodeItem Find(this ITable<CodeItem> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static CodeItemKind Find(this ITable<CodeItemKind> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Config Find(this ITable<Config> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static File Find(this ITable<File> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static HintFile Find(this ITable<HintFile> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Parser Find(this ITable<Parser> table, string ParserGuid)
		{
			return table.FirstOrDefault(t =>
				t.ParserGuid == ParserGuid);
		}

		public static Project Find(this ITable<Project> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Property Find(this ITable<Property> table, string Name)
		{
			return table.FirstOrDefault(t =>
				t.Name == Name);
		}

		public static SharedText Find(this ITable<SharedText> table, long Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
