<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConnectorsFromElementTemplate" xml:space="preserve">
    <value>//
// Get Connector (conveyed items) from selected Elements
// Select Element and get diagram
//
select  s.ea_guid AS CLASSGUID, s.object_type AS CLASSTYPE, s.name As Source , d.name As Destination
from t_xref x,   // a lot of things like properties,..
     t_connector c,
     t_object s, // Souce element
     t_object d  // destination element

where  x.description like  '#WC##CurrentElementGUID##WC#' AND
       x.Behavior = 'conveyed' AND
       c.ea_guid = x.client    

and    c.ea_guid = x.client
and    c.start_object_id = s.object_id
and    c.end_object_id = d.object_id</value>
  </data>
  <data name="ConveyedItemsIdsTemplate" xml:space="preserve">
    <value>//
// Get Elements from selected Connector (conveyed Items)
//
select  o.ea_guid AS CLASSGUID, o.object_type AS CLASSTYPE, o.name As Element
from t_object o

where  o.Object_ID in ( #ConveyedItemIDS# )</value>
  </data>
  <data name="CurrentItemGuidTemplate" xml:space="preserve">
    <value>//
// Get current Item GUID (Package, Diagram, Element, Attribut, Operation)
//
// Template for macro: #CurrentItemGUID# or Alias #CurrentElementGUID#
//
// V1.00 17. May 2016 created
//

// As Element
select o.ea_guid AS CLASSGUID, o.object_type AS CLASSTYPE,o.Name AS Name,o.object_type As Type 
from t_object o
where o.ea_guid = '#CurrentElementGUID#'

UNION

// As Diagram
select dia.ea_guid AS CLASSGUID, dia.diagram_type AS CLASSTYPE,dia.Name AS Name,dia.diagram_type As Type 
from t_diagram dia
where dia.ea_guid = '#CurrentElementGUID#'

UNION

// As Package
select pkg.ea_guid AS CLASSGUID, 'Package' AS CLASSTYPE,pkg.Name AS Name,'Package' As Type 
from t_package pkg
where pkg.ea_guid = '#CurrentElementGUID#'



UNION
// As Attribute
select attr.ea_guid AS CLASSGUID,'Attribute',attr.Name AS Name,'Attribute' 
from t_attribute attr
where attr.ea_guid = '#CurrentElementGUID#'

UNION

// As operation
select opr.ea_guid AS CLASSGUID,'P',opr.Name AS Name,'Operation' 
from t_operation opr
where opr.ea_guid = '#CurrentElementGUID#'

ORDER BY Name</value>
  </data>
  <data name="CurrentItemIdTemplate" xml:space="preserve">
    <value>//
// Get current Item ID (Package, Diagram, Element, Attribut, Operation)
//
// Template for macro: #CurrentItemID# or Alias #CurrentElementID#
// Pay Attention: ID may be ambiguous. Better use #CurrentItemId#
//
// V1.00 17. May 2016 created
//

// As Element
select o.ea_guid AS CLASSGUID, o.object_type AS CLASSTYPE,o.Name AS Name,o.object_type As Type 
from t_object o
where o.object_ID = #CurrentElementID#

UNION

// As Diagram
select dia.ea_guid AS CLASSGUID, dia.diagram_type AS CLASSTYPE,dia.Name AS Name,dia.diagram_type As Type 
from t_diagram dia
where dia.diagram_ID = #CurrentElementID#

UNION

// As Package
select pkg.ea_guid AS CLASSGUID, 'Package' AS CLASSTYPE,pkg.Name AS Name,'Package' As Type 
from t_package pkg
where pkg.package_ID = #CurrentElementID#



UNION
// As Attribute
select attr.ea_guid AS CLASSGUID,'Attribute',attr.Name AS Name,'Attribute' 
from t_attribute attr
where attr.object_ID = #CurrentElementID#

UNION

// As operation
select opr.ea_guid AS CLASSGUID,'P',opr.Name AS Name,'Operation' 
from t_operation opr
where opr.object_ID = #CurrentElementID#

ORDER BY Name</value>
  </data>
  <data name="DemoRunScript" xml:space="preserve">
    <value>//
// Template DemoRunScript
// use Script: 
// - hoDemoScript (3 parameters)
// - hoDemoPrintContext (2 parameters)
//
//
select o.ea_guid AS CLASSGUID, o.object_type AS CLASSTYPE,o.Name AS Name,o.object_type As Type 
from t_object o
where o.name like '&lt;Search Term&gt;#WC#' AND      o.object_type in 
     (
      "Class","Component"
      )
ORDER BY o.Name</value>
    <comment>Demo Query to run and test Script to performs operations on found rows.</comment>
  </data>
  <data name="DiagramElementsIdsTemplate" xml:space="preserve">
    <value>//
// Template DiagramElements_IDS
//
select o.ea_guid AS CLASSGUID, o.object_type AS CLASSTYPE,o.Name AS Name,o.object_type As Type 
from t_object o
where o.object_ID in (#DiagramElements_IDS#)
  
ORDER BY o.Name</value>
  </data>
  <data name="DiagramSelectedElementsIdsTemplate" xml:space="preserve">
    <value>//
// Template DiagramElements_IDS
//
select o.ea_guid AS CLASSGUID, o.object_type AS CLASSTYPE,o.Name AS Name,o.object_type As Type 
from t_object o
where o.object_ID in (#DiagramSelectedElements_IDS#)
  
ORDER BY o.Name</value>
  </data>
  <data name="hoDemo2ParScript" xml:space="preserve">
    <value>'EA-Matic
'[path=\Framework\ho\hoTools]
'[group=hoTools]
!INC Local Scripts.EAConstants-VBScript
' Dim doesn't work (syntax error)
' Object 'Session' doesn't exist (use  Repository.WriteOutput "Script", "MyTest",0)
' Var 'Repository' is loaded
' You may create an instance 'EAAddinFramework.Utils.Model' of the first running EA-Instance

function hoDemoPrintContext(modelItem, objectType)
    'Dim itemType as 5
	itemType = "unknown"
	Select Case objectType
	    Case otElement
			itemType = "Element"
		Case otPackage
			itemType = "Package"
		Case otDiagram
			itemType = "Diagram"
		Case otAttribute
			itemType = "Attribute"
		Case otOperation
			itemType = "Operation"
	End Select
	Dim s 
	s = "hoDemoPrintContext: Context item is: '" + modelItem.Name + "' of type '" + itemType + "'"
    ' Output to EA			
    Repository.EnsureOutputVisible("Script") 
	Repository.WriteOutput "Script", s, 0
end function</value>
    <comment>Demo Script to show Script functionality with 2 Parameters</comment>
  </data>
  <data name="hoDemo3ParScript" xml:space="preserve">
    <value>'EA-Matic
' Usage of Geert Bellekens Script Framework to administer Scripts recommended
'[path=\Framework\ho\hoTools]
'[group=hoTools]
'option explicit

!INC Local Scripts.EAConstants-VBScript
'----------------------------------------------------------------------
' Dim doesn't work (syntax error, used in EA for intellissense)
' Object 'Session' doesn't exist (use  Repository.WriteOutput "Script", "MyTest",0)
' Var 'Repository' is loaded by script environment
' You may create an instance 'EAAddinFramework.Utils.Model' of the first running EA-Instance

'---------------------------------------------------------------------
' Par1: ModelItem (diagram, package, element)
' Par2: ObjectType
' Par3: Model (methods and attributes see code in https://github.com/Helmut-Ortmann/EnterpriseArchitect_hoTools.git)
function hoDemo3Parameter(ModelItem, ObjectType, Model)
   ' The EA default variable 'Repository'
    'Repository.ClearOutput("Script")
    Repository.EnsureOutputVisible("Script") 

    ' just output the parameters
	Repository.WriteOutput "Script","Par1: '"+ CStr(ObjectType) + "' Par2: '" + ModelItem.Name + "' Par3: '" + Model + "'",0
	
	' Get Repository via Model object.
    set m = CreateObject("EAAddinFramework.Utils.Model")
    ' Create new Model Object with the first running EA instance
	set rep = m.Repository
	rep.EnsureOutputVisible("Script") 
	rep.WriteOutput "Script","Par1: '"+ CStr(ObjectType) + "' Par2: '" + ModelItem.Name + "' Par3: '" + Model + "'",0
	
	itemType = "unknown"
	Select Case ObjectType
	    Case otElement
			itemType = "Element"
		Case otPackage
			itemType = "Package"
		Case otDiagram
			itemType = "Diagram"
		Case otAttribute
			itemType = "Attribute"
		Case otOperation
			itemType = "Operation"
	End Select
	rep.WriteOutput "Script", "hoDemo3Parameter: item type='" + itemType + "', name='" + ModelItem.Name + "' found.",0
	rep.WriteOutput "Script","----------------------------------------------------",0

end function</value>
    <comment>Demo Script to show Script functionality with 3 Parameters</comment>
  </data>
  <data name="SearchFavorite" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;RootSearch&gt;&lt;Search Name="Favorites" GUID="{A70B9F0E-14CD-4c03-B8FE-21C644DC2D5E}" 
PkgGUID="-1" Type="0" LnksToObj="0" CustomSearch="1" AddinAndMethodName=""&gt;&lt;SrchOn&gt;
&lt;RootTable Filter="select o.ea_guid As CLASSGUID, o.Object_Type as CLASSTYPE, o.Name, o.stereotype, o.object_type &amp;#xA;from t_object o inner join t_xref x on (o.EA_GUID = x.client)&amp;#xA;where Type = 'Favorite'&amp;#xA;UNION&amp;#xA;select d.ea_guid As CLASSGUID, d.Diagram_Type as CLASSTYPE, d.Name, d.stereotype, d.diagram_type &amp;#xA;from t_diagram d inner join t_xref x on (d.EA_GUID = x.client)&amp;#xA;where Type = 'Favorite'&amp;#xA;UNION&amp;#xA;select a.ea_guid As CLASSGUID, 'Attribute' as CLASSTYPE, a.Name, a.stereotype, 'Attribute' &amp;#xA;from t_attribute a inner join t_xref x on (a.EA_GUID = x.client)&amp;#xA;where x.Type = 'Favorite'&amp;#xA;UNION&amp;#xA;select op.ea_guid As CLASSGUID, 'Opperation' as CLASSTYPE, op.Name, op.stereotype, 'Operation' &amp;#xA;from t_operation op inner join t_xref x on (op.EA_GUID = x.client)&amp;#xA;where x.Type = 'Favorite'&amp;#xA;order by 3" Type="-1"&gt;&lt;TableName Display="Custom SQL Search" Name=""/&gt;
&lt;TableHierarchy Display="" Hierarchy=""/&gt;&lt;/RootTable&gt;&lt;/SrchOn&gt;&lt;LnksTo/&gt;&lt;/Search&gt;&lt;/RootSearch&gt;</value>
    <comment>*.xml file of the EA Search Favorite</comment>
  </data>
  <data name="SearchFavoriteName" xml:space="preserve">
    <value>Favorites</value>
    <comment>Demo script to show functionality of scripts</comment>
  </data>
</root>